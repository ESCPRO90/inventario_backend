# Script para probar el m√≥dulo de productos
$baseUrl = "http://localhost:3001/api"

Write-Host "üîë Obteniendo token de autenticaci√≥n..." -ForegroundColor Yellow

# Login
$loginBody = @{
    username = "admin"
    password = "admin123"
} | ConvertTo-Json

try {
    $loginResponse = Invoke-RestMethod -Uri "$baseUrl/auth/login" `
        -Method Post `
        -ContentType "application/json" `
        -Body $loginBody
    
    if ($loginResponse.success) {
        $token = $loginResponse.data.token
        Write-Host "‚úÖ Token obtenido exitosamente" -ForegroundColor Green
        
        # Configurar headers con el token
        $headers = @{
            "Authorization" = "Bearer $token"
        }
        
        # Probar categor√≠as
        Write-Host "`nüìÅ Listando categor√≠as..." -ForegroundColor Yellow
        try {
            $categorias = Invoke-RestMethod -Uri "$baseUrl/productos/categorias/listar" `
                -Method Get `
                -Headers $headers
            
            Write-Host "‚úÖ Categor√≠as encontradas: $($categorias.data.total)" -ForegroundColor Green
            foreach ($cat in $categorias.data.categorias) {
                Write-Host "   - $($cat.nombre) (ID: $($cat.id), Productos: $($cat.total_productos))" -ForegroundColor White
            }
        } catch {
            Write-Host "‚ùå Error al listar categor√≠as: $_" -ForegroundColor Red
        }
        
        # Probar productos
        Write-Host "`nüì¶ Listando productos..." -ForegroundColor Yellow
        try {
            $productos = Invoke-RestMethod -Uri "$baseUrl/productos" `
                -Method Get `
                -Headers $headers
            
            Write-Host "‚úÖ Productos encontrados: $($productos.data.paginacion.total)" -ForegroundColor Green
            foreach ($prod in $productos.data.productos) {
                Write-Host "   - $($prod.codigo): $($prod.descripcion.Substring(0, [Math]::Min(50, $prod.descripcion.Length)))..." -ForegroundColor White
                Write-Host "     Stock: $($prod.stock_actual) | Categor√≠a: $($prod.categoria_nombre)" -ForegroundColor Gray
            }
        } catch {
            Write-Host "‚ùå Error al listar productos: $_" -ForegroundColor Red
        }
        
        # Productos con stock bajo
        Write-Host "`n‚ö†Ô∏è  Verificando productos con stock bajo..." -ForegroundColor Yellow
        try {
            $stockBajo = Invoke-RestMethod -Uri "$baseUrl/productos/stock-bajo" `
                -Method Get `
                -Headers $headers
            
            if ($stockBajo.data.total -gt 0) {
                Write-Host "‚ö†Ô∏è  Productos con stock bajo: $($stockBajo.data.total)" -ForegroundColor Yellow
                foreach ($prod in $stockBajo.data.productos) {
                    Write-Host "   - $($prod.codigo): Stock actual: $($prod.stock_actual) / M√≠nimo: $($prod.stock_minimo)" -ForegroundColor Yellow
                }
            } else {
                Write-Host "‚úÖ No hay productos con stock bajo" -ForegroundColor Green
            }
        } catch {
            Write-Host "‚ùå Error al verificar stock bajo: $_" -ForegroundColor Red
        }
        
        Write-Host "`n‚úÖ Pruebas completadas!" -ForegroundColor Green
        Write-Host "`nToken para usar en otras pruebas:" -ForegroundColor Cyan
        Write-Host $token -ForegroundColor Gray
        
    } else {
        Write-Host "‚ùå Error en login: $($loginResponse.message)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Error de conexi√≥n: $_" -ForegroundColor Red
    Write-Host "Aseg√∫rate de que el servidor est√© corriendo (npm run dev)" -ForegroundColor Yellow
}